// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© TchelloSimis with HUGE HUGE thanks to TrendEspresso, which is simply put a Pine wizard. 
// This script projects two different moving averages into the future by using an average of their past rate of change (aka the first derivative). 
// All other scripts (that I have seen) are limited in the sense that they need user-based input of projected price rate of change, whereas this script projects that change using an average of past data.
// This one also supports multiple different MA types: Simple MA (SMA), Exponential MA (EMA), Weighted MA(WMA) and Hull MA(HMA). 
// Do note that projections towards the future are always a guess and will be, 99% of the time, incorrect. This is mostly a utility script and predictions using it must be very well thought through. 
// FAQs:
// 1) Why a max 250 candles into the future? 
// A: This is a PineScript limitation. Pine can only plot 500 objects on screen at once. Since there are two MAs, we can only use 250 for each. 
// 2) Can I use this for MTF MAs? Like seeing the 20w SMA while looking at the 4hr chart.
// A: No. Again, this is a Pine limitation. Due to the way the projections are plotted, it simply does not allow me to code this for MTF.

//@version=5

varip max_lines = 500
indicator(title="MAs with Derivative-based Projections", shorttitle="MAs with Projections", overlay=true, max_lines_count=max_lines)

// Inputs  
string ema_type = input.string('EMA', '1st MA Type', inline = 'MA 1', group = 'Moving Averages', options = ["EMA", "SMA", "WMA", "HMA"])
ema_length = 	input.int(233, '1st MA Length', inline = 'MA 1', group = 'Moving Averages')
ema_color = 	input.color(#00BCD4, '', inline = 'MA 1', group = 'Moving Averages')
string sma_type = input.string('SMA', '2nd MA Type', inline = 'MA 2', group = 'Moving Averages', options = ["EMA", "SMA", "WMA", "HMA"])
sma_length = 	input.int(200, '2nd MA Length', inline = 'MA 2', group = 'Moving Averages')
sma_color = 	input.color(#E65100, '',	inline = 'MA 2', group = 'Moving Averages')

ROCL = input.int(12,'Derivative MA Length', group = 'Projection Settings', tooltip = 'The period length in which the average rate of change of each MA is calculated', minval = 1)
n = input.int(52, 'Number of Future Bars', group = 'Projection Settings', tooltip = 'The number of bars to be projected into the future for the MAs', maxval = 250, minval = 2)
op = input.int(20, 'Minimum Projection Opacity', group = 'Projection Settings', tooltip = 'The minimum opacity reached as the MA projection fades out')
comp = input.bool(true, 'Use Compounding Projection?', group = 'Projection Settings', tooltip = 'Whether to use compounding calculations (i.e. % rate of change instead of absolute value) when projecting the MA into the future')

// Definitions
ema_value = switch ema_type 
    'EMA' => ta.ema(close, ema_length)
    'SMA' => ta.sma(close, ema_length)
    'WMA' => ta.wma(close, ema_length)
    'HMA' => ta.hma(close, ema_length)
sma_value = switch sma_type 
    'EMA' => ta.ema(close, sma_length)
    'SMA' => ta.sma(close, sma_length)
    'WMA' => ta.wma(close, sma_length)
    'HMA' => ta.hma(close, sma_length)

smaROC = ( sma_value - sma_value[n] ) / n
emaROC = ( ema_value - ema_value[n] ) / n

// smaROCma = comp ? (ta.sma(smaROC, ROCL)/sma_value) : (ta.sma(smaROC, ROCL))
// emaROCma = comp ? (ta.sma(emaROC, ROCL)/ema_value) : (ta.sma(emaROC, ROCL))

// Plots
plot(ema_value, color=ema_color, title='1st MA', linewidth=2)
plot(sma_value, color=sma_color, title='2nd MA', linewidth=2)


// Delete all other lines
// for i = 1 to max_lines
//     line.new(na, na, na, na, xloc.bar_time, color = na)

var arr_lines_MA1 = array.new_line ( n )
var arr_lines_MA2 = array.new_line ( n )

bar_index_as_time = time_close - time_close[1]
f_X_Loc ( i )    => time_close + ( bar_index_as_time * i )

// Draw Projections For Compounding
if barstate.islast
    prev_ema_value = ema_value
    prev_sma_value = sma_value
    for i = 0 to n - 1 by 1
        ext = i >= n - 1 ? extend.right : extend.none
        x1 = f_X_Loc ( i - 1 )
        x2 = f_X_Loc ( i )
        ema_value := prev_ema_value + emaROC
        sma_value := prev_sma_value + smaROC
        line.delete ( array.get ( arr_lines_MA1, i ) )
        line.delete ( array.get ( arr_lines_MA2, i ) )
        array.set ( arr_lines_MA1, i, line.new(x1,
                                               prev_ema_value,
                                               x2,
                                               ema_value,
                                               xloc.bar_time,
                                               ext,
                                               color.new(ema_color, ((100/n)*i) - op),
                                               line.style_dotted,
                                               2) )
        array.set ( arr_lines_MA2, i, line.new(x1,
                                               prev_sma_value,
                                               x2,
                                               sma_value,
                                               xloc.bar_time,
                                               ext,
                                               color.new(sma_color, ((100/n)*i) - op),
                                               line.style_dotted,
                                               2) )
        prev_ema_value := ema_value
        prev_sma_value := sma_value
