// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// This script provides you with the RSI of an asset, an EMA of it, and Bollinger Bands. It also provides you with tools for a reverse function calculator. 
// Special thanks to © balipour for creating the original reverse RSI function. © TchelloSimis

//@version=5
indicator(title='RSI + BB + EMA with Reverse Calculator Panel', shorttitle='RSI + EMA + BB + RRSI', overlay=false)


//Settings
src = input(ohlc4, '===== Source =====')
len = input.int(28, 'RSI Length', minval=2)
lenema = input.int(89, 'EMA Length', minval=2)
pan = input(true, ' Show Information Panel')
off = input.int(50, '  Panel Position Offset', minval=0)
s = input(false, 'Show Entered RSI Price Level')
ersi = input(40.0, '  Entered RSI Input')
s2 = input(false, 'Show RSI Level for Input Price')
ip = input.float(10000, '  Entered Price for RSI')
dec = input.int(1, 'Decimals', minval=0, maxval=10)
bg = input(true, 'Invisible Background')

//Reverse RSI Functions
reverse(Level) =>
    x1 = (len - 1) * (ta.rma(math.max(nz(src[1], src) - src, 0), len) * Level / (100 - Level) - ta.rma(math.max(src - nz(src[1], src), 0), len))
    x1 >= 0 ? src + x1 : src + x1 * (100 - Level) / Level

//RSI
rsi = ta.rsi(src, len)
stdevmult = input.float(2, 'RSI std. dev multiplier', minval = 0)
dispmult = input.float(0.13, 'RSI dispersion zone multiplier', minval = 0)

//RSIEMA
ma = ta.ema(rsi, lenema)
stdev = ta.stdev(rsi, lenema)
upperBand = ma + stdevmult*stdev
lowerBand = ma - stdevmult*stdev
upperDisp = ma + ((upperBand-lowerBand)*dispmult)
lowerDisp = ma - ((upperBand-lowerBand)*dispmult)
ob = upperBand
os = lowerBand

//Plot BB
plot(upperBand, color=color.new(#009688, 20), linewidth = 2)
plot(lowerBand, color=color.new(#009688, 20), linewidth = 2)
lowDisp = plot(lowerDisp, color=color.new(#009688, 100))
highDisp = plot(upperDisp, color=color.new(#009688, 100))
fill(plot1 = lowDisp, plot2= highDisp, color=color.new(#009688, 80))

//Decide RSI color
rsiColoring = rsi > upperDisp ? #00BCD4 : (rsi > lowerDisp ? #FFEB3B : #E65100)

//Reverse RSI Price Level Calculations
revma = reverse(ma)
revob = reverse(ob)
revos = reverse(os)
reversi = reverse(ersi)

//Reverse Reverse RSI
rr(input) =>
    alpha = 1 / len
    up1 = ta.rma(math.max(ta.change(src), 0), len)
    down1 = ta.rma(-math.min(ta.change(src), 0), len)
    up = alpha * math.max(input - src[1], 0) + (1 - alpha) * nz(up1[1])
    down = alpha * -math.min(input - src[1], 0) + (1 - alpha) * nz(down1[1])
    rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - 100 / (1 + up / down)
    rsi


rrrsi = rr(ip)


//Plots

plot(rsi, color=rsiColoring, linewidth=2)
plot(ma, 'EMA', color=#E91E63, style=plot.style_line, linewidth=2)

plot(s ? ersi : na, 'Entered RSI Value', color=color.new(color.lime, 100), trackprice=true, show_last=1)
plot(s2 ? rrrsi : na, 'RSI Value for Entered Price', color=color.new(color.red, 100), trackprice=true, show_last=1)
//Information Panel
labelstyle = label.style_label_center
labelstyle2 = label.style_label_down

labelc = bg ? color.new(#000000, 100) : color.new(#000000, 100)



//Round Function
Round(src, digits) =>
    p = math.pow(10, digits)
    math.round(math.abs(src) * p) / p * math.sign(src)

//Offset 
xp(offset) =>
    time + math.round(ta.change(time) * offset)

lable1(offset, P, T, s, color_PnL) =>
    label PnL_Label = na
    PnL_Label := label.new(xp(offset), P, text=T, color=color_PnL, textcolor=color.white, style=s, yloc=yloc.price, xloc=xloc.bar_time, size=size.normal)
    label.delete(PnL_Label[1])


ud() =>
    if rsi < ma
        'above EMA'
    else
        'below EMA'

//Panel Plot
if pan
    lable1(off, 50, 'RSI cross ' + ud() + ' price : ' + str.tostring(Round(revma, dec)) + '\n\n' + str.tostring(Round(ob, dec)) + ' upper band price : ' + str.tostring(Round(revob, dec)) + '\n\n' + str.tostring(Round(os, dec)) + ' lower band price : ' + str.tostring(Round(revos, dec)), labelstyle, labelc)


if s
    lable1(1, ersi, str.tostring(Round(ersi, dec)) + ' RSI Price : ' + str.tostring(Round(reversi, dec)), labelstyle2, labelc)


if s2
    lable1(1, rrrsi, 'RSI ' + str.tostring(Round(rrrsi, dec)) + ' For Input Price ' + str.tostring(Round(ip, dec)), labelstyle2, labelc)

